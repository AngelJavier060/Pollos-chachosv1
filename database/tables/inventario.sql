-- Crear enum para tipos de producto
CREATE TYPE tipo_producto AS ENUM ('alimento', 'medicina');

-- Crear enum para tipos de animal
CREATE TYPE tipo_animal AS ENUM ('pollos', 'cerdos');

-- Crear enum para estado de producto
CREATE TYPE estado_producto AS ENUM ('active', 'low_stock', 'critical', 'cycle_ended');

-- Crear tabla de productos
CREATE TABLE productos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    detalle TEXT,
    tipo tipo_producto NOT NULL,
    tipo_animal tipo_animal NOT NULL,
    forma_alimento VARCHAR(100),
    cantidad DECIMAL(10,2) NOT NULL DEFAULT 0,
    unidad_medida VARCHAR(50) NOT NULL,
    precio_unitario DECIMAL(10,2) NOT NULL,
    proveedor VARCHAR(255) NOT NULL,
    numero_factura VARCHAR(100) NOT NULL,
    fecha_compra DATE NOT NULL,
    nivel_minimo DECIMAL(10,2) NOT NULL,
    nivel_critico DECIMAL(10,2) NOT NULL,
    estado estado_producto DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Crear tabla para el historial de movimientos
CREATE TABLE movimientos_inventario (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    producto_id BIGINT REFERENCES productos(id),
    tipo_movimiento VARCHAR(50) NOT NULL,
    cantidad DECIMAL(10,2) NOT NULL,
    stock_anterior DECIMAL(10,2) NOT NULL,
    stock_nuevo DECIMAL(10,2) NOT NULL,
    fecha TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    motivo TEXT NOT NULL,
    usuario_id UUID REFERENCES auth.users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Trigger para actualizar updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_productos_updated_at
    BEFORE UPDATE ON productos
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Políticas de seguridad (RLS)
ALTER TABLE productos ENABLE ROW LEVEL SECURITY;
ALTER TABLE movimientos_inventario ENABLE ROW LEVEL SECURITY;

-- Política para productos
CREATE POLICY "Usuarios autenticados pueden ver productos" ON productos
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Solo administradores pueden modificar productos" ON productos
    FOR ALL USING (auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin');

-- Política para movimientos
CREATE POLICY "Usuarios autenticados pueden ver movimientos" ON movimientos_inventario
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Solo administradores pueden crear movimientos" ON movimientos_inventario
    FOR INSERT USING (auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin');
