-- El nombre del archivo incluye la fecha para orden
BEGIN;
-- Eliminar tablas si existen
-- Crear enums si no existenEXISTS movimientos_inventario;
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'tipo_producto') THEN
        CREATE TYPE tipo_producto AS ENUM ('alimento', 'medicina');DROP TYPE IF EXISTS estado_producto;
    END IF;imal;
    _producto;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'tipo_animal') THEN
        CREATE TYPE tipo_animal AS ENUM ('pollos', 'cerdos');
    END IF;producto AS ENUM ('alimento', 'medicina');
    ('pollos', 'cerdos');
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'estado_producto') THEN'active', 'low_stock', 'critical', 'cycle_ended');
        CREATE TYPE estado_producto AS ENUM ('active', 'low_stock', 'critical', 'cycle_ended');
    END IF;
END$$;
ITY PRIMARY KEY,
-- Crear tablas si no existen
CREATE TABLE IF NOT EXISTS productos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,,
    nombre VARCHAR(255) NOT NULL,
    detalle TEXT,
    tipo tipo_producto NOT NULL,0,
    tipo_animal tipo_animal NOT NULL,
    forma_alimento VARCHAR(100),
    cantidad DECIMAL(10,2) NOT NULL DEFAULT 0,  proveedor VARCHAR(255) NOT NULL,
    unidad_medida VARCHAR(50) NOT NULL,    numero_factura VARCHAR(100) NOT NULL,
    precio_unitario DECIMAL(10,2) NOT NULL,
    proveedor VARCHAR(255) NOT NULL,LL,
    numero_factura VARCHAR(100) NOT NULL,
    fecha_compra DATE NOT NULL,
    nivel_minimo DECIMAL(10,2) NOT NULL,EFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    nivel_critico DECIMAL(10,2) NOT NULL,ONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
    estado estado_producto DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);inventario (
 PRIMARY KEY,
CREATE TABLE IF NOT EXISTS movimientos_inventario (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  tipo_movimiento VARCHAR(50) NOT NULL,
    producto_id BIGINT REFERENCES productos(id),    cantidad DECIMAL(10,2) NOT NULL,
    tipo_movimiento VARCHAR(50) NOT NULL,NULL,
    cantidad DECIMAL(10,2) NOT NULL,
    stock_anterior DECIMAL(10,2) NOT NULL,ITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    stock_nuevo DECIMAL(10,2) NOT NULL,otivo TEXT NOT NULL,
    fecha TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    motivo TEXT NOT NULL,TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
    usuario_id UUID REFERENCES auth.users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);-- Trigger para actualizar updated_at
at_column()
-- Crear función y trigger solo si no existen
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$);
BEGIN    RETURN NEW;
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';CREATE TRIGGER update_productos_updated_at
ctos
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_productos_updated_at') THEN
        CREATE TRIGGER update_productos_updated_at
            BEFORE UPDATE ON productos
            FOR EACH ROWALTER TABLE movimientos_inventario ENABLE ROW LEVEL SECURITY;
            EXECUTE FUNCTION update_updated_at_column();
    END IF;
END$$;ctos" ON productos
    FOR SELECT USING (auth.role() = 'authenticated');
-- Aplicar RLS y políticas solo si las tablas son nuevas
DO $$
BEGIN    FOR ALL USING (auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin');
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'productos') THEN





















COMMIT;END$$;    END IF;            FOR INSERT USING (auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin');        CREATE POLICY "Solo administradores pueden crear movimientos" ON movimientos_inventario            FOR SELECT USING (auth.role() = 'authenticated');        CREATE POLICY "Usuarios autenticados pueden ver movimientos" ON movimientos_inventario                ALTER TABLE movimientos_inventario ENABLE ROW LEVEL SECURITY;    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'movimientos_inventario') THEN        END IF;            FOR ALL USING (auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin');        CREATE POLICY "Solo administradores pueden modificar productos" ON productos            FOR SELECT USING (auth.role() = 'authenticated');        CREATE POLICY "Usuarios autenticados pueden ver productos" ON productos                ALTER TABLE productos ENABLE ROW LEVEL SECURITY;-- Política para movimientos
CREATE POLICY "Usuarios autenticados pueden ver movimientos" ON movimientos_inventario
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Solo administradores pueden crear movimientos" ON movimientos_inventario
    FOR INSERT USING (auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin');

COMMIT;